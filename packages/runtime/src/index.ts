// Public API of the protobuf-ts runtime.
// Note: we do not use `export * from ...` to help tree shakers,
// webpack verbose output hints that this should be useful

// Convenience JSON typings and corresponding type guards
export {JsonValue, JsonObject, typeofJsonValue, isJsonObject} from './json-typings.js';

// Base 64 encoding
export {base64decode, base64encode} from './base64.js';

// UTF8 encoding
export {utf8read} from './protobufjs-utf8.js';

// Binary format contracts, options for reading and writing, for example
export {
    WireType,
    BinaryReadOptions,
    BinaryWriteOptions,
    binaryWriteOptions,
    binaryReadOptions,
    mergeBinaryOptions,
    IBinaryWriter,
    IBinaryReader,
    UnknownFieldHandler,
} from './binary-format-contract.js';

// Standard IBinaryReader implementation
export {BinaryReader} from './binary-reader.js';

// Standard IBinaryWriter implementation
export {BinaryWriter} from './binary-writer.js';

// Int64 and UInt64 implementations required for the binary format
export {PbLong, PbULong} from './pb-long.js';

// JSON format contracts, options for reading and writing, for example
export {
    JsonReadOptions, JsonWriteOptions, JsonWriteStringOptions, jsonReadOptions, jsonWriteOptions, mergeJsonOptions
} from './json-format-contract.js';

// Message type contract
export {IMessageType, PartialMessage} from './message-type-contract.js';

// Message type implementation via reflection
export {MessageType} from './message-type.js';

// Reflection info, generated by the plugin, exposed to the user, used by reflection ops
export {
    ScalarType,
    LongType,
    RepeatType,
    MessageInfo,
    EnumInfo,
    FieldInfo,
    PartialFieldInfo,
    normalizeFieldInfo,
    readFieldOptions
} from './reflection-info.js';

// Types for messsage objects type at runtime, when concrete type is unknown.
export {
    UnknownEnum,
    UnknownMap,
    UnknownMessage,
    UnknownOneofGroup,
    UnknownScalar
} from './unknown-types.js';

// Message operations via reflection
export {ReflectionTypeCheck} from './reflection-type-check.js';
export {reflectionCreate} from './reflection-create.js';
export {reflectionScalarDefault} from './reflection-scalar-default.js';
export {reflectionMergePartial} from './reflection-merge-partial.js';
export {reflectionEquals} from './reflection-equals.js';
export {ReflectionBinaryReader} from './reflection-binary-reader.js';
export {ReflectionBinaryWriter} from './reflection-binary-writer.js';
export {ReflectionJsonReader} from './reflection-json-reader.js';
export {ReflectionJsonWriter} from './reflection-json-writer.js';

// Type guarding at runtime, may be interesting to the user for his reflection ops
export {isOneofGroup} from './is-oneof-group.js';

// Enum object type guard and reflection util, may be interesting to the user.
export {EnumObjectValue, listEnumValues, listEnumNames, listEnumNumbers, isEnumObject} from './enum-object.js';

// lowerCamelCase() is exported for plugin, rpc-runtime and other rpc packages
export {lowerCamelCase} from './lower-camel-case.js';

// assertion functions are exported for plugin, may also be useful to user
export {assert, assertNever, assertInt32, assertUInt32, assertFloat32} from './assert.js';
